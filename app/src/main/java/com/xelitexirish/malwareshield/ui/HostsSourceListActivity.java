package com.xelitexirish.malwareshield.ui;


import android.app.ListActivity;
import android.content.DialogInterface;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.NavUtils;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.text.Editable;
import android.text.InputType;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.TextView;

import com.xelitexirish.malwareshield.R;
import com.xelitexirish.malwareshield.db.ProviderHelper;
import com.xelitexirish.malwareshield.util.RegexUtils;

import java.util.ArrayList;

public class HostsSourceListActivity extends AppCompatActivity {

    private long currentRowId;
    ListView listViewSource;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hosts_source_list);

        this.listViewSource = (ListView) findViewById(R.id.listViewSource);

        ArrayList enabledHosts = ProviderHelper.getEnabledHostsSourcesArrayList(this);
        final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<>(this, R.layout.item_list_bullet, enabledHosts);
        this.listViewSource.setAdapter(arrayAdapter);

        registerForContextMenu(listViewSource);

    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        menu.setHeaderTitle(R.string.dialog_edit_source_title);
        getMenuInflater().inflate(R.menu.edit_source, menu);
    }

    @Override
    public boolean onContextItemSelected(MenuItem item) {
        AdapterView.AdapterContextMenuInfo info = (AdapterView.AdapterContextMenuInfo) item.getMenuInfo();
        int id = item.getItemId();

        if(id == R.id.menu_edit){
            editEntry(info);
            return true;
        }else if(id == R.id.menu_delete){
            deleteSource(info);
            return true;
        }else {
            return super.onContextItemSelected(item);
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.hosts_source_activity, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if (id == android.R.id.home) {
            NavUtils.navigateUpFromSameTask(this);
            return true;
        }else if(id == R.id.action_add_source){
            showMenuAddEntry();
        }


        return super.onOptionsItemSelected(item);
    }

    public void deleteSource(AdapterView.AdapterContextMenuInfo contextMenuInfo){
        currentRowId = contextMenuInfo.id;
        ProviderHelper.deleteHostsSource(this, currentRowId);
    }

    public void editEntry(AdapterView.AdapterContextMenuInfo contextMenuInfo){
        currentRowId = contextMenuInfo.id;
        int position = contextMenuInfo.position;
        View view = contextMenuInfo.targetView;

        TextView textViewUrl = (TextView) view.findViewWithTag("url_" + position);

        AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
        alertDialog.setTitle(R.string.button_edit);
        alertDialog.setCancelable(true);

        LayoutInflater inflater = LayoutInflater.from(this);
        final View dialogView = inflater.inflate(R.layout.dialog_add_host_source, null);
        final EditText editTextInput = (EditText) dialogView.findViewById(R.id.editTextInput);
        editTextInput.setText(textViewUrl.getText());
        editTextInput.setInputType(InputType.TYPE_TEXT_VARIATION_URI);
        Editable inputEditContent = editTextInput.getText();
        editTextInput.setSelection(inputEditContent.length());

        alertDialog.setView(dialogView);
        alertDialog.setPositiveButton(R.string.button_save, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();

                String input = editTextInput.getText().toString();
                if(RegexUtils.isValidUrl(input)){
                    ProviderHelper.updateHostsSourceUrl(HostsSourceListActivity.this, currentRowId, input);
                }else {
                    AlertDialog.Builder alertDialog = new AlertDialog.Builder(HostsSourceListActivity.this);
                    alertDialog.setTitle(R.string.dialog_non_url_title);
                    alertDialog.setMessage(R.string.dialog_non_url_message);
                    alertDialog.setPositiveButton(R.string.button_close, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
                    alertDialog.show();
                }
            }
        });
        alertDialog.setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        alertDialog.show();
    }

    public void showMenuAddEntry(){
        final AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
        alertDialog.setTitle(R.string.dialog_add_source_title);
        alertDialog.setCancelable(true);

        LayoutInflater inflater = LayoutInflater.from(this);
        final View dialogView = inflater.inflate(R.layout.dialog_add_host_source, null);
        final EditText editTextInput = (EditText) dialogView.findViewById(R.id.editTextInput);

        editTextInput.setText("htp://");
        editTextInput.setInputType(InputType.TYPE_TEXT_VARIATION_URI);

        Editable inputEditContent = editTextInput.getText();
        editTextInput.setSelection(inputEditContent.length());

        alertDialog.setView(dialogView);
        alertDialog.setPositiveButton(R.string.button_add, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
                String input = editTextInput.getText().toString();
                addEntry(input);
            }
        });
        alertDialog.setNegativeButton(R.string.button_cancel, new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        alertDialog.show();
    }

    private void addEntry(String input){
        if(input != null){
            if(RegexUtils.isValidUrl(input)){
                ProviderHelper.insertHostsSource(this, input);
            }else {
                AlertDialog.Builder alertDialog = new AlertDialog.Builder(this);
                alertDialog.setTitle(R.string.dialog_non_url_title);
                alertDialog.setMessage(R.string.dialog_non_url_message);
                alertDialog.setPositiveButton(R.string.button_close, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        dialog.dismiss();
                    }
                });
                alertDialog.show();
            }
        }
    }
}
