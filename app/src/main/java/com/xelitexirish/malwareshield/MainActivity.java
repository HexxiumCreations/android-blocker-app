package com.xelitexirish.malwareshield;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.xelitexirish.malwareshield.preference.Prefs;
import com.xelitexirish.malwareshield.service.ApplyHostsFileService;
import com.xelitexirish.malwareshield.service.RevertHostsFileService;
import com.xelitexirish.malwareshield.service.UpdateService;
import com.xelitexirish.malwareshield.service.WakeService;
import com.xelitexirish.malwareshield.ui.Dialogs;
import com.xelitexirish.malwareshield.ui.HostsSourceListActivity;
import com.xelitexirish.malwareshield.ui.SettingsActivity;
import com.xelitexirish.malwareshield.util.Constants;
import com.xelitexirish.malwareshield.util.EnumStatusCodes;
import com.xelitexirish.malwareshield.util.HostsHelper;

import org.sufficientlysecure.rootcommands.RootCommands;

public class MainActivity extends AppCompatActivity {

    LocalBroadcastManager localBroadcastManager;
    BroadcastReceiver broadcastReceiver;

    public ProgressBar progressBarStatus;
    public ImageView imageViewStatus;
    public TextView textViewStatusTitle;
    public TextView textViewStatus;
    public Button buttonApply;
    public Button buttonRevert;
    public TextView textViewBlockedSites;

    private String currentStatusTitle;
    private String currentStatusText;
    private int currentAppStatusIcon;
    private boolean currentButtonsEnabled;

    public static boolean isDeviceRooted = false;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        this.progressBarStatus = (ProgressBar) findViewById(R.id.progressBarStatus);
        this.imageViewStatus = (ImageView) findViewById(R.id.imageViewStatus);
        this.textViewStatusTitle = (TextView) findViewById(R.id.textViewStatusTitle);
        this.textViewStatus = (TextView) findViewById(R.id.textViewStatus);
        this.buttonApply = (Button) findViewById(R.id.buttonApply);
        this.buttonRevert = (Button) findViewById(R.id.buttonRevert);
        this.textViewBlockedSites = (TextView) findViewById(R.id.textViewBlockedSites);

        if(savedInstanceState != null){
            String title = savedInstanceState.getString("appStatusTitle");
            String text = savedInstanceState.getString("appStatusText");
            int iconStatus = savedInstanceState.getInt("appStatusIcon");
            boolean buttonsEnabled = savedInstanceState.getBoolean("appButtonsEnabled");

            if(title != null && text != null && iconStatus != -1){
                setAppStatus(text, text, iconStatus);
            }
            setButtonsEnabled(buttonsEnabled);
        }

        localBroadcastManager = LocalBroadcastManager.getInstance(this);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(Constants.ACTION_UPDATE_STATUS);
        intentFilter.addAction(Constants.ACTION_BUTTONS);
        broadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                Bundle bundleExtras = intent.getExtras();
                if(intent.getAction().equals(Constants.ACTION_UPDATE_STATUS)){
                    if(bundleExtras != null){
                        if(bundleExtras.containsKey(Constants.EXTRA_UPDATE_STATUS_TITLE) && bundleExtras.containsKey(Constants.EXTRA_UPDATE_STATUS_TEXT) && bundleExtras.containsKey(Constants.EXTRA_UPDATE_STATUS_ICON)){
                            String title = bundleExtras.getString(Constants.EXTRA_UPDATE_STATUS_TITLE);
                            String text = bundleExtras.getString(Constants.EXTRA_UPDATE_STATUS_TEXT);
                            int status = bundleExtras.getInt(Constants.EXTRA_UPDATE_STATUS_ICON);
                            setAppStatus(title, text, status);
                        }
                    }
                }
                if(intent.getAction().equals(Constants.ACTION_BUTTONS)){
                    if(bundleExtras != null){
                        if(bundleExtras.containsKey(Constants.EXTRA_BUTTONS_DISABLED)){
                            boolean buttonsEnabled = bundleExtras.getBoolean(Constants.EXTRA_BUTTONS_DISABLED);
                            setButtonsEnabled(buttonsEnabled);
                        }
                    }
                }
            }
        };
        localBroadcastManager.registerReceiver(broadcastReceiver, intentFilter);

        if (RootCommands.rootAccessGiven()) {
            isDeviceRooted = true;
            if(HostsHelper.isHostsFileCorrect(Constants.ANDROID_SYSTEM_ETC_HOSTS)){
                if(Prefs.doUpdateCheck(this)){
                    Intent intent = new Intent(this, UpdateService.class);
                    intent.putExtra(UpdateService.EXTRA_BACKGROUND_EXECUTION, false);
                    WakeService.sendWakefulWork(this, intent);
                }else {
                    updateStatusEnabled(this);
                }
            }else {
                updateStatusDisabled(this);
            }

        }else {
            // Show no root dialog
            Dialogs.showNoRootDialog(this);
        }

        buttonApply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                enableHostsFile();
            }
        });

        buttonRevert.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                revertHostsFile();
            }
        });
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);

        outState.putString("appStatusTitle", currentStatusTitle);
        outState.putString("appStatusText", currentStatusText);
        outState.putInt("appStatusIcon", currentAppStatusIcon);
        outState.putBoolean("appButtonsEnabled", currentButtonsEnabled);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main_activity, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if(id == R.id.action_viewHostsFile){
            HostsHelper.openHostsFile(this);
        }else if(id == R.id.action_edit_sources){
            Intent intent = new Intent(this, HostsSourceListActivity.class);
            startActivity(intent);
        }else if(id == R.id.action_settings){
            Intent intent = new Intent(this, SettingsActivity.class);
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }

    public void setAppStatus(String titleText, String status, int iconStatus){
        textViewStatusTitle.setText(titleText);
        textViewStatus.setText(status);
        setAppIconStatus(iconStatus);

        currentStatusTitle = titleText;
        currentStatusText = status;
        currentAppStatusIcon = iconStatus;

        textViewBlockedSites.setText("Currently blocked websites: " + ApplyHostsFileService.websitesBlocked);
    }

    public void setAppIconStatus(int status) {

        if(status == EnumStatusCodes.UPDATE_AVAILABLE){
            progressBarStatus.setVisibility(View.GONE);
            imageViewStatus.setVisibility(View.VISIBLE);
            imageViewStatus.setImageResource(R.drawable.status_update);

        }else if(status == EnumStatusCodes.ENABLED){
            progressBarStatus.setVisibility(View.GONE);
            imageViewStatus.setVisibility(View.VISIBLE);
            imageViewStatus.setImageResource(R.drawable.status_enabled);

        }else if(status == EnumStatusCodes.DISABLED){
            progressBarStatus.setVisibility(View.GONE);
            imageViewStatus.setVisibility(View.VISIBLE);
            imageViewStatus.setImageResource(R.drawable.status_disabled);

        }else if(status == EnumStatusCodes.DOWNLOAD_FAIL){
            progressBarStatus.setVisibility(View.GONE);
            imageViewStatus.setImageResource(R.drawable.status_fail);
            imageViewStatus.setVisibility(View.VISIBLE);

        }else if(status == EnumStatusCodes.CHECKING){
            progressBarStatus.setVisibility(View.VISIBLE);
            imageViewStatus.setVisibility(View.GONE);
        }
    }

    public void setButtonsEnabled(boolean enabled){
        buttonApply.setEnabled(enabled);
        buttonRevert.setEnabled(enabled);

        currentButtonsEnabled = enabled;
    }

    public void enableHostsFile() {
        if (isDeviceRooted) {
            WakeService.sendWakefulWork(this, ApplyHostsFileService.class);
        }else {
            Dialogs.showNoRootDialog(this);
        }
    }

    public void revertHostsFile() {
        if (isDeviceRooted) {
            WakeService.sendWakefulWork(this, RevertHostsFileService.class);
        }else {
            Dialogs.showNoRootDialog(this);
        }
    }

    /**
     * Helper Methods
     */
    public static void updateStatusEnabled(Context context){
        sendStatusBroadcast(context, context.getString(R.string.status_enabled), context.getString(R.string.status_enabled_subtitle), EnumStatusCodes.ENABLED);
    }

    public static void updateStatusDisabled(Context context){
        sendStatusBroadcast(context, context.getString(R.string.status_disabled), context.getString(R.string.status_disabled_subtitle), EnumStatusCodes.DISABLED);
    }

    public static void sendStatusBroadcast(Context context, String statusTitle, String statusText, int statusIcon){
        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
        Intent intent = new Intent(Constants.ACTION_UPDATE_STATUS);
        intent.putExtra(Constants.EXTRA_UPDATE_STATUS_TITLE, statusTitle);
        intent.putExtra(Constants.EXTRA_UPDATE_STATUS_TEXT, statusText);
        intent.putExtra(Constants.EXTRA_UPDATE_STATUS_ICON, statusIcon);
        localBroadcastManager.sendBroadcast(intent);
    }

    public static void sendButtonsEnabledBroadcase(Context context, boolean buttonsEnabled){
        LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(context);
        Intent intent = new Intent(Constants.ACTION_BUTTONS);
        intent.putExtra(Constants.EXTRA_BUTTONS_DISABLED, buttonsEnabled);
        localBroadcastManager.sendBroadcast(intent);
    }

    public static boolean hasInternetConnection(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {
            return true;
        }
        return false;
    }
}
