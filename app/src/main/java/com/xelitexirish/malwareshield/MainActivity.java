package com.xelitexirish.malwareshield;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.graphics.Color;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v7.app.AppCompatActivity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import com.xelitexirish.malwareshield.preference.Prefs;
import com.xelitexirish.malwareshield.service.ApplyHostsFileService;
import com.xelitexirish.malwareshield.service.RevertHostsFileService;
import com.xelitexirish.malwareshield.service.WakeService;
import com.xelitexirish.malwareshield.ui.Dialogs;
import com.xelitexirish.malwareshield.ui.HostsSourceListActivity;
import com.xelitexirish.malwareshield.util.Constants;
import com.xelitexirish.malwareshield.util.EnumStatusCodes;
import com.xelitexirish.malwareshield.util.HostsHelper;

import org.sufficientlysecure.rootcommands.RootCommands;

public class MainActivity extends AppCompatActivity {

    public TextView textViewHeader;
    public Button buttonApply;
    public Button buttonRevert;
    public TextView textViewAppStatus;

    public static boolean appRunning = false;
    public static boolean isDeviceRooted = false;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        this.textViewHeader = (TextView) findViewById(R.id.textViewHeader);
        this.buttonApply = (Button) findViewById(R.id.buttonApply);
        this.buttonRevert = (Button) findViewById(R.id.buttonRevert);
        this.textViewAppStatus = (TextView) findViewById(R.id.textViewAppStatus);

        final SharedPreferences preferences = getSharedPreferences(getResources().getString(R.string.app_name), MODE_PRIVATE);
        appRunning = preferences.getBoolean("APP_RUNNING_STATE", false);

        if (RootCommands.rootAccessGiven()) {
            isDeviceRooted = true;

            // Has the hosts file been applied
            if (HostsHelper.isHostsFileCorrect(Constants.ANDROID_SYSTEM_ETC_HOSTS)) {
                // Do background check if enabled
                if (Prefs.doUpdateCheck(this)) {
                    // TODO
                } else {
                    setAppStatus(EnumStatusCodes.ENABLED);
                }
            } else {
                setAppStatus(EnumStatusCodes.DISABLED);
            }
        }else {
            // Show no root dialog
            Dialogs.showNoRootDialog(this);
        }

        buttonApply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                enableHostsFile();
            }
        });

        buttonRevert.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                revertHostsFile();
            }
        });
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu_main_activity, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();

        if(id == R.id.action_viewHostsFile){
            HostsHelper.openHostsFile(this);
        }else if(id == R.id.action_edit_sources){
            Intent intent = new Intent(this, HostsSourceListActivity.class);
            startActivity(intent);
        }

        return super.onOptionsItemSelected(item);
    }

    public void setAppStatus(int status) {

        if (status == EnumStatusCodes.ENABLED) {
            this.textViewAppStatus.setText(getResources().getString(R.string.app_name) + ": " + "ENABLED");
            this.textViewAppStatus.setTextColor(Color.GREEN);
        } else if (status == EnumStatusCodes.DISABLED) {
            this.textViewAppStatus.setText(getResources().getString(R.string.app_name) + ": " + "DISABLED");
            this.textViewAppStatus.setTextColor(Color.RED);
        }
    }

    public void enableHostsFile() {
        if (isDeviceRooted) {
            WakeService.sendWakefulWork(this, ApplyHostsFileService.class);
        }else {
            Dialogs.showNoRootDialog(this);
        }
    }

    public void revertHostsFile() {
        if (isDeviceRooted) {
            WakeService.sendWakefulWork(this, RevertHostsFileService.class);
        }else {
            Dialogs.showNoRootDialog(this);
        }
    }

    public static boolean hasInternetConnection(Context context) {
        ConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
        if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {
            return true;
        }
        return false;
    }
}
