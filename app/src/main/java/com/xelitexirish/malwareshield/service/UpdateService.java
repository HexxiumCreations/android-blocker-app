package com.xelitexirish.malwareshield.service;

import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;

import com.xelitexirish.malwareshield.MainActivity;
import com.xelitexirish.malwareshield.R;
import com.xelitexirish.malwareshield.db.DatabaseContract;
import com.xelitexirish.malwareshield.db.ProviderHelper;
import com.xelitexirish.malwareshield.preference.Prefs;
import com.xelitexirish.malwareshield.util.Constants;
import com.xelitexirish.malwareshield.util.EnumStatusCodes;
import com.xelitexirish.malwareshield.util.HostsHelper;
import com.xelitexirish.malwareshield.util.ResultHelper;

import java.net.URL;
import java.net.URLConnection;

public class UpdateService extends WakeService{

    Context context;

    private boolean applyAfterCheck;
    private boolean backgroundExecution;

    private int numberOfFailedDownloads;
    private int numberOfDownloads;

    public static final String EXTRA_BACKGROUND_EXECUTION = "com.xelitexirish.malwareshield.BACKGROUND_EXECUTION";

    public UpdateService() {
        super(UpdateService.class.getSimpleName());
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        context = this;

        backgroundExecution = false;
        Bundle extras = intent.getExtras();
        if(extras != null){
            if(extras.containsKey(EXTRA_BACKGROUND_EXECUTION)){
                backgroundExecution = extras.getBoolean(EXTRA_BACKGROUND_EXECUTION);
            }
        }
        applyAfterCheck = false;
        if(backgroundExecution){
            if(Prefs.doAutomaticUpdateDaily(context)){
                applyAfterCheck = extras.getBoolean(EXTRA_BACKGROUND_EXECUTION);
            }
        }

        return super.onStartCommand(intent, flags, startId);
    }

    @Override
    public void doWakefulWork(Intent intent) {

        MainActivity.sendStatusBroadcast(context, context.getString(R.string.status_checking), context.getString(R.string.status_checking_subtitle), EnumStatusCodes.CHECKING);

        int result = checkForUpdates();

        if(result == EnumStatusCodes.UPDATE_AVAILABLE && applyAfterCheck){
            WakeService.sendWakefulWork(context, ApplyHostsFileService.class);
        }else {
            String successfulDownloads = (numberOfDownloads - numberOfFailedDownloads) + "/" + numberOfDownloads;
            ResultHelper.showResult(context, result, successfulDownloads);
        }
    }

    private int checkForUpdates() {

        Cursor enabledHostsSourceCursor;
        long currentLastModifiedLocal;
        long currentLastModifiedOnline;
        boolean updateAvailable = false;

        int returnCode = EnumStatusCodes.ENABLED;

        if(MainActivity.hasInternetConnection(context)){

            numberOfFailedDownloads = 0;
            numberOfDownloads = 0;

            // get cursor over all enabled hosts source
            enabledHostsSourceCursor = ProviderHelper.getEnabledHostsSourcesCursor(context);

            if(enabledHostsSourceCursor != null && enabledHostsSourceCursor.moveToFirst()){
                do {
                    numberOfDownloads++;

                    String currentUrl = enabledHostsSourceCursor.getString(enabledHostsSourceCursor.getColumnIndex("url"));
                    currentLastModifiedLocal = enabledHostsSourceCursor.getLong(enabledHostsSourceCursor.getColumnIndex("last_modified_local"));

                    try {
                        URL mURL = new URL(currentUrl);
                        URLConnection connection = mURL.openConnection();
                        connection.setConnectTimeout(15000);
                        connection.setReadTimeout(30000);

                        currentLastModifiedOnline = connection.getLastModified();

                        connection.connect();
                        connection.getInputStream();

                        if(currentLastModifiedOnline > currentLastModifiedLocal){
                            updateAvailable = true;
                        }

                        // save last modified online for later viewing in list
                        ProviderHelper.updateHostsSourceLastModifiedOnline(context, enabledHostsSourceCursor.getInt(enabledHostsSourceCursor.getColumnIndex(DatabaseContract.HostsSources._ID)), currentLastModifiedOnline);

                    }catch (Exception e) {

                        numberOfFailedDownloads++;

                        // set last_modified_online of failed download to 0 (not available)
                        ProviderHelper.updateHostsSourceLastModifiedOnline(context, enabledHostsSourceCursor.getInt(enabledHostsSourceCursor.getColumnIndex(DatabaseContract.HostsSources._ID)), 0);
                    }
                }while (enabledHostsSourceCursor.moveToNext());
            }

            if(enabledHostsSourceCursor != null && !enabledHostsSourceCursor.isClosed()){
                enabledHostsSourceCursor.close();
            }

            if(numberOfDownloads == numberOfFailedDownloads && numberOfDownloads != 0){
                returnCode = EnumStatusCodes.DOWNLOAD_FAIL;
            }
        }else {
            if(!backgroundExecution){
                returnCode = EnumStatusCodes.NO_CONNECTION;
            }
        }

        if(updateAvailable){
            returnCode = EnumStatusCodes.UPDATE_AVAILABLE;
        }

        if(!HostsHelper.isHostsFileCorrect(Constants.ANDROID_SYSTEM_ETC_HOSTS)){
            returnCode = EnumStatusCodes.DISABLED;
        }
        return returnCode;
    }
}
