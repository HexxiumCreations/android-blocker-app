package com.xelitexirish.malwareshield.service;

import android.content.Context;
import android.content.Intent;

import com.xelitexirish.malwareshield.MainActivity;
import com.xelitexirish.malwareshield.R;
import com.xelitexirish.malwareshield.preference.Prefs;
import com.xelitexirish.malwareshield.ui.Dialogs;
import com.xelitexirish.malwareshield.util.Constants;
import com.xelitexirish.malwareshield.util.EnumStatusCodes;
import com.xelitexirish.malwareshield.util.HostsHelper;

import org.sufficientlysecure.rootcommands.Shell;
import org.sufficientlysecure.rootcommands.util.Log;

import java.io.FileOutputStream;

public class RevertHostsFileService extends WakeService {

    private Context context;

    public RevertHostsFileService() {
        super(RevertHostsFileService.class.getSimpleName());
    }

    @Override
    public int onStartCommand(Intent intent, int flags, int startId) {
        context = this;

        return super.onStartCommand(intent, flags, startId);
    }

    /**
     * Asynchronous background operations of service, with wakelock
     */
    @Override
    public void doWakefulWork(Intent intent) {

        try {
            Shell rootShell = Shell.startRootShell();
            int revertResult = revert(rootShell);

            if(revertResult == EnumStatusCodes.REVERT_SUCCESS){
            }
            rootShell.close();

        } catch (Exception e) {
            Log.e(Constants.TAG, "Problem while reverting!", e);
        }
    }

    /**
     * Reverts to default hosts file
     *
     * @return Status codes REVERT_SUCCESS or REVERT_FAIL
     */
    private int revert(Shell shell) {

        MainActivity.sendStatusBroadcast(context, context.getString(R.string.status_reverting), context.getString(R.string.status_reverting_subtitle), EnumStatusCodes.CHECKING);

        // build standard hosts file
        try {
            FileOutputStream fileOutputStream = context.openFileOutput(Constants.HOSTS_FILENAME, Context.MODE_PRIVATE);

            // default localhost
            String localhost = Constants.LOCALHOST_IPv4 + " " + Constants.LOCALHOST_HOSTNAME;
            fileOutputStream.write(localhost.getBytes());
            fileOutputStream.close();

            // copy build hosts file with RootTools, based on target from preferences
            if (Prefs.getApplyMethod(context).equals("writeToSystem")) {
                HostsHelper.copyHostsFile(context, Constants.ANDROID_SYSTEM_ETC_HOSTS, shell);

            } else if (Prefs.getApplyMethod(context).equals("writeToDataData")) {
                HostsHelper.copyHostsFile(context, Constants.ANDROID_DATA_DATA_HOSTS, shell);

            } else if (Prefs.getApplyMethod(context).equals("writeToData")) {
                HostsHelper.copyHostsFile(context, Constants.ANDROID_DATA_HOSTS, shell);

            } else if (Prefs.getApplyMethod(context).equals("customTarget")) {
                HostsHelper.copyHostsFile(context, Prefs.getCustomTarget(context), shell);

            }

            // delete generated hosts file after applying it
            context.deleteFile(Constants.HOSTS_FILENAME);

            MainActivity.updateStatusDisabled(context);

            return EnumStatusCodes.REVERT_SUCCESS;
        } catch (Exception e) {
            Log.e(Constants.TAG, "Exception", e);

            return EnumStatusCodes.REVERT_FAIL;
        }
    }
}
