package com.xelitexirish.malwareshield.util;

import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.StatFs;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.widget.Toast;

import com.xelitexirish.malwareshield.R;
import com.xelitexirish.malwareshield.exception.Exceptions;

import org.sufficientlysecure.rootcommands.Shell;
import org.sufficientlysecure.rootcommands.Toolbox;
import org.sufficientlysecure.rootcommands.command.SimpleCommand;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

public class HostsHelper {

    /**
     * Check if there is enough space on partition where target is located
     *
     * @param size   size of file to put on partition
     * @param target path where to put the file
     * @return true if it will fit on partition of target, false if it will not fit.
     */
    public static boolean hasEnoughSpaceOnPartition(String target, long size) {
        try {
            // new File(target).getFreeSpace() (API 9) is not working on data partition

            // get directory without file
            String directory = new File(target).getParent().toString();

            StatFs stat = new StatFs(directory);
            long blockSize = stat.getBlockSize();
            long availableBlocks = stat.getAvailableBlocks();
            long availableSpace = availableBlocks * blockSize;

            Log.i(Constants.TAG, "Checking for enough space: Target: " + target + ", directory: "
                    + directory + " size: " + size + ", availableSpace: " + availableSpace);

            if (size < availableSpace) {
                return true;
            } else {
                Log.e(Constants.TAG, "Not enough space on partition!");
                return false;
            }
        } catch (Exception e) {
            // if new StatFs(directory) fails catch IllegalArgumentException and just return true as
            // workaround
            Log.e(Constants.TAG, "Problem while getting available space on partition!", e);
            return true;
        }
    }

    /**
     * Checks by reading hosts file if hosts file is edited or not
     *
     * @return true if it is edited
     */
    public static boolean isHostsFileCorrect(String target) {
        boolean status = false;

        /* Check if first line in hosts file is AdAway comment */
        InputStream stream = null;
        InputStreamReader inputStreamReader = null;
        BufferedReader bufferedReader = null;
        try {
            File file = new File(target);

            stream = new FileInputStream(file);
            inputStreamReader = new InputStreamReader(stream);
            bufferedReader = new BufferedReader(inputStreamReader);

            String firstLine = bufferedReader.readLine();

            Log.d(Constants.TAG, "First line of " + target + ": " + firstLine);

            if (firstLine.equals(Constants.HEADER1)) {
                status = true;
            } else {
                status = false;
            }
        } catch (FileNotFoundException e) {
            Log.e(Constants.TAG, "FileNotFoundException", e);
            status = true; // workaround for: http://code.google.com/p/ad-away/issues/detail?id=137
        } catch (Exception e) {
            Log.e(Constants.TAG, "Exception: ", e);
            status = false;
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException e) {
                    Log.e(Constants.TAG, "Exception", e);
                }
            }
        }
        return status;
    }

    /**
     * Copy hosts file from private storage of AdAway to internal partition using RootTools
     *
     * @throws Exceptions.NotEnoughSpaceException RemountException CopyException
     */
    public static void copyHostsFile(Context context, String target, Shell shell) throws Exceptions.NotEnoughSpaceException, Exceptions.RemountException, Exceptions.CommandException {
        Log.i(Constants.TAG, "Copy hosts file with target: " + target);

        String privateDir = context.getFilesDir().getAbsolutePath();
        String privateFile = privateDir + File.separator + Constants.HOSTS_FILENAME;

        // Target cant end with a slash
        if (target.endsWith("/")) {
            Log.e(Constants.TAG, "Custom target ends with trailing slash, it is not a valid target!");
            throw new Exceptions.CommandException();
        }

        if (!target.equals(Constants.ANDROID_SYSTEM_ETC_HOSTS)) {
            createMissingDirectories(target, shell);
        }

        // Check to make sure theres enough space
        long size = new File(privateFile).length();
        Log.i(Constants.TAG, "Size of hosts file: " + size);

        if (!hasEnoughSpaceOnPartition(target, size)) {
            throw new Exceptions.NotEnoughSpaceException();
        }

        Toolbox toolbox = new Toolbox(shell);

        /* Execute commands */
        try {
            // Remount to enable write access
            Log.i(Constants.TAG, "Remounting for RW...");
            if (!toolbox.remount(target, "RW")) {
                Log.e(Constants.TAG, "Remounting as RW failed! Probably not a problem!");
            }

            // Remove before copying when using /system/etc/hosts
            if (target.equals(Constants.ANDROID_SYSTEM_ETC_HOSTS)) {
                SimpleCommand command = new SimpleCommand(Constants.COMMAND_RM + " " + target);
                shell.add(command).waitForFinish();
            }

            // Copy hosts file
            if (!toolbox.copyFile(privateFile, target, false, false)) {
                throw new Exceptions.CommandException();
            }

            // Execute commands: chown, chmod
            SimpleCommand command = new SimpleCommand(Constants.COMMAND_CHOWN + " " + target, Constants.COMMAND_CHMOD_644 + " " + target);
            shell.add(command).waitForFinish();

        } catch (Exception e) {
            Log.e(Constants.TAG, "Exception!", e);
            throw new Exceptions.CommandException();

        } finally {
            if (target.equals(Constants.ANDROID_SYSTEM_ETC_HOSTS)) {
                // after all remount system back as read only
                Log.i(Constants.TAG, "Remounting back to RO...");
                if (!toolbox.remount(target, "RO")) {
                    Log.e(Constants.TAG, "Remounting failed in finally! Probably not a problem!");
                }
            }
        }
    }

    /**
     * Create symlink from /system/etc/hosts to /data/data/hosts
     *
     * @throws Exceptions.RemountException CommandException
     */
    public static void createSymlink(String target) throws Exceptions.RemountException, Exceptions.CommandException {
        Shell rootShell = null;

        try {
            rootShell = Shell.startRootShell();

        } catch (Exception e) {
            throw new Exceptions.CommandException("Problem opening root shell!");
        }
        Toolbox toolbox = new Toolbox(rootShell);

        /* Remount /system/etc for write access */
        if (!toolbox.remount(Constants.ANDROID_SYSTEM_ETC_HOSTS, "RW")) {
            throw new Exceptions.RemountException();
        }

        /* Execute commands */
        try {
            // Create symlink
            SimpleCommand command = new SimpleCommand(Constants.COMMAND_RM + " " + Constants.ANDROID_SYSTEM_ETC_HOSTS, Constants.COMMAND_LN + " " + target + " " + Constants.ANDROID_SYSTEM_ETC_HOSTS,
                    Constants.COMMAND_CHCON_SYSTEMFILE + " " + target,
                    Constants.COMMAND_CHOWN + " " + target,
                    Constants.COMMAND_CHMOD_644 + " " + target
            );

            rootShell.add(command).waitForFinish();

        } catch (Exception e) {
            throw new Exceptions.CommandException();

        } finally {
            // After all remount system back as read only
            toolbox.remount(Constants.ANDROID_SYSTEM_ETC_HOSTS, "RO");

            try {
                rootShell.close();
            } catch (IOException e) {
                throw new Exceptions.CommandException("Problem closing root shell!");
            }
        }
    }

    /**
     * Checks whether /system/etc/hosts is a symlink and pointing to the target or not
     *
     * @param target
     * @return
     * @throws Exceptions.CommandException
     */
    public static boolean isSymlinkCorrect(String target, Shell shell) {
        Log.i(Constants.TAG, "Checking whether /system/etc/hosts is a symlink and pointing to " + target + " or not.");

        Toolbox toolbox = new Toolbox(shell);
        String symlink = null;

        try {
            symlink = toolbox.getSymlink(Constants.ANDROID_SYSTEM_ETC_HOSTS);

        } catch (Exception e) {
            Log.e(Constants.TAG, "Problem getting symlink!", e);
            return false;
        }

        Log.d(Constants.TAG, "symlink: " + symlink + "; target: " + target);

        if (symlink != null && symlink.equals(target)) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Create directories if missing, if /data/etc/hosts is set as target, this creates /data/etc/
     * directories. Needs RW on partition!
     *
     * @throws Exceptions.CommandException
     */
    public static void createMissingDirectories(String target, Shell shell) throws Exceptions.CommandException {
        /* Execute commands */
        try {
            // get directory without file
            String directory = new File(target).getParent().toString();

            // create directories
            try {
                SimpleCommand mkdirCommand = new SimpleCommand(Constants.COMMAND_MKDIR + " " + directory);
                shell.add(mkdirCommand).waitForFinish();

            } catch (Exception e) {
                Log.e(Constants.TAG, "Mkdir Exception", e);
            }

        } catch (Exception e) {
            Log.e(Constants.TAG, "Exception!", e);

            throw new Exceptions.CommandException();
        }
    }

    /**
     * Open hosts file with default text app
     *
     * @param context
     */
    public static void openHostsFile(Context context) {
        try {
            Shell rootShell = Shell.startRootShell();

            Toolbox toolbox = new Toolbox(rootShell);

            if (toolbox.remount(Constants.ANDROID_SYSTEM_ETC_HOSTS, "RW")) {
                openFileWithEditor(context, Constants.ANDROID_SYSTEM_ETC_HOSTS);
            } else {
                Log.e(Constants.TAG, "System partition could not be remounted as rw!");
            }

            rootShell.close();
        } catch (Exception e) {
            Log.e(Constants.TAG, "Problem with root shell!", e);
        }
    }

    /**
     * Open default app for opening plain text files
     *
     * @param context
     * @param file
     */
    private static void openFileWithEditor(final Context context, String file) {
        Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        Uri uri = Uri.parse("file://" + file);
        intent.setDataAndType(uri, "text/plain");

        try {
            context.startActivity(intent);
        } catch (ActivityNotFoundException e) {
            Toast.makeText(context, "No activity found to open file", Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
}
