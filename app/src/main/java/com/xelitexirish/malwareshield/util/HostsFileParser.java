package com.xelitexirish.malwareshield.util;


import android.util.Log;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import gnu.trove.set.hash.THashSet;

/**
 * A parser to build sets out of hosts files. Redirection Lists have higher priority than whitelist
 * or blacklist items.
 */
public class HostsFileParser {
    private THashSet<String> mBlacklist;

    private Matcher mHostsParserMatcher;
    private Pattern mHostsParserPattern;


    public HostsFileParser(BufferedReader input) throws IOException {
        parse(input);
    }

    public THashSet<String> getBlacklist() {
        return mBlacklist;
    }


    /**
     * Parse hosts file from BufferedReader
     *
     * @param reader
     * @throws IOException
     */
    private void parse(BufferedReader reader) throws IOException {
        String nextLine;
        String currentIp;
        String currentHostname;
        mBlacklist = new THashSet<>();

        mHostsParserPattern = RegexUtils.hostsParserPattern;

        while ((nextLine = reader.readLine()) != null) {
            mHostsParserMatcher = mHostsParserPattern.matcher(nextLine);

            if (mHostsParserMatcher.matches()) {

                currentIp = mHostsParserMatcher.group(1);
                currentHostname = mHostsParserMatcher.group(2);

                // check if ip is 127.0.0.1 or 0.0.0.0
                if (currentIp.equals(Constants.LOCALHOST_IPv4) || currentIp.equals(Constants.BOGUS_IPv4)) {
                    mBlacklist.add(currentHostname);
                }

            } else {
                Log.d(Constants.TAG, "Does not match: " + nextLine);
            }
        }

        // strip localhost entry from blacklist and redirection list
        mBlacklist.remove(Constants.LOCALHOST_HOSTNAME);
    }

    /**
     * Add blacklist to this hosts file
     *
     * @param blacklist
     */
    public void addBlacklist(THashSet<String> blacklist) {
        mBlacklist.addAll(blacklist);
    }
}
