package com.xelitexirish.malwareshield.util;


import android.content.Context;

import com.xelitexirish.malwareshield.preference.Prefs;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import gnu.trove.set.hash.THashSet;

/**
 * A parser to build sets out of hosts files. Redirection Lists have higher priority than whitelist
 * or blacklist items.
 */
public class HostsFileParser {
    private THashSet<String> mBlacklist;
    private THashSet<String> mAdsList;

    private Matcher mHostsParserMatcher;
    private Pattern mHostsParserPattern;


    public HostsFileParser(Context context, BufferedReader input) throws IOException {
        parse(context, input);
    }

    public THashSet<String> getBlacklist() {
        return mBlacklist;
    }

    public THashSet<String> getAdsList() {
        return mAdsList;
    }

    /**
     * Parse hosts file from BufferedReader
     *
     * @param reader
     * @throws IOException
     */
    private void parse(Context context, BufferedReader reader) throws IOException {
        String nextLine;
        String currentIp;
        String currentHostname;
        mBlacklist = new THashSet<>();
        mAdsList = new THashSet<>();

        mHostsParserPattern = RegexUtils.hostsParserPattern;

        while ((nextLine = reader.readLine()) != null) {
            mHostsParserMatcher = mHostsParserPattern.matcher(nextLine);

            if (mHostsParserMatcher.matches()) {
                if (Prefs.doNormalBlockedWebsites(context)) {
                    currentIp = mHostsParserMatcher.group(1);
                    currentHostname = mHostsParserMatcher.group(2);

                    // check if ip is 127.0.0.1 or 0.0.0.0
                    if (currentIp.equals(Constants.LOCALHOST_IPv4) || currentIp.equals(Constants.BOGUS_IPv4)) {
                        mBlacklist.add(currentHostname);
                    }
                }

            } else {
                if (Prefs.doAdBlockLists(context)) {
                    if (nextLine.startsWith("||")) {
                        mAdsList.add(nextLine.substring(2));
                    }
                }
                if (Prefs.doHostsFileLists(context)) {
                    if (nextLine.startsWith("127.0.0.1")) {
                        String[] lineParts = nextLine.split("\\t");
                        if(lineParts.length == 1) {
                            mAdsList.add(lineParts[1]);
                        }
                    }
                }
            }
        }

        // strip localhost entry from blacklist and redirection list
        mBlacklist.remove(Constants.LOCALHOST_HOSTNAME);
    }

    /**
     * Add blacklist to this hosts file
     *
     * @param blackList
     */
    public void addBlacklist(THashSet<String> blackList) {
        mBlacklist.addAll(blackList);
    }

    /**
     * Add adsList to the hosts file
     *
     * @param adsList
     */
    public void addAdsList(THashSet<String> adsList) {
        mAdsList.addAll(adsList);
    }
}
