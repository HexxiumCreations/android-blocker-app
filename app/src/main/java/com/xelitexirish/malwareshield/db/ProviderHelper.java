package com.xelitexirish.malwareshield.db;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;

import com.xelitexirish.malwareshield.db.DatabaseContract;

import java.util.ArrayList;
import java.util.Iterator;

import gnu.trove.set.hash.THashSet;

public class ProviderHelper {

    // Hosts Source
    public static void insertHostsSource(Context context, String url) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.HostsSources.URL, url);
        values.put(DatabaseContract.HostsSources.ENABLED, true); // default is enabled
        values.put(DatabaseContract.HostsSources.LAST_MODIFIED_LOCAL, 0); // last_modified_local starts at 0
        values.put(DatabaseContract.HostsSources.LAST_MODIFIED_ONLINE, 0); // last_modified_onlinestarts at 0
        context.getContentResolver().insert(DatabaseContract.HostsSources.CONTENT_URI, values);
    }

    public static void deleteHostsSource(Context context, long rowId) {
        context.getContentResolver().delete(DatabaseContract.HostsSources.buildUri(Long.toString(rowId)), null, null);
    }

    public static void updateHostsSourceUrl(Context context, long rowId, String url) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.HostsSources.URL, url);
        context.getContentResolver().update(DatabaseContract.HostsSources.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static void updateHostsSourceEnabled(Context context, long rowId, boolean enabled) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.HostsSources.ENABLED, enabled);
        context.getContentResolver().update(DatabaseContract.HostsSources.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static void updateHostsSourceLastModifiedLocal(Context context, long rowId,
                                                          long last_modified_local) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.HostsSources.LAST_MODIFIED_LOCAL, last_modified_local);
        context.getContentResolver().update(DatabaseContract.HostsSources.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static void updateHostsSourceLastModifiedOnline(Context context, long rowId,
                                                           long last_modified_online) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.HostsSources.LAST_MODIFIED_ONLINE, last_modified_online);
        context.getContentResolver().update(DatabaseContract.HostsSources.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static Cursor getEnabledHostsSourcesCursor(Context context) {
        return context.getContentResolver().query(
                DatabaseContract.HostsSources.CONTENT_URI,
                new String[] { DatabaseContract.HostsSources._ID, DatabaseContract.HostsSources.URL,
                        DatabaseContract.HostsSources.LAST_MODIFIED_LOCAL, DatabaseContract.HostsSources.LAST_MODIFIED_ONLINE,
                        DatabaseContract.HostsSources.ENABLED }, DatabaseContract.HostsSources.ENABLED + "=1", null,
                DatabaseContract.HostsSources.DEFAULT_SORT);
    }

    /**
     * Returns all hosts sources that are enabled as ArrayList
     *
     * @param context
     * @return
     */
    public static ArrayList<String> getEnabledHostsSourcesArrayList(Context context) {
        ArrayList<String> list = new ArrayList<String>();
        Cursor cursor = getEnabledHostsSourcesCursor(context);

        if (cursor.moveToFirst()) {
            do {
                list.add(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.HostsSources.URL)));
            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }
        return list;
    }

    /**
     * Go through all enabled hosts sources and set local last modified to online last modified
     *
     * @param context
     * @return
     */
    public static void updateAllEnabledHostsSourcesLastModifiedLocalFromOnline(Context context) {
        Cursor cursor = getEnabledHostsSourcesCursor(context);
        int idCol = cursor.getColumnIndex(DatabaseContract.HostsSources._ID);
        int lastModifiedOnlineCol = cursor.getColumnIndex(DatabaseContract.HostsSources.LAST_MODIFIED_ONLINE);

        long lastModifiedOnline;
        long id;

        if (cursor.moveToFirst()) {
            do {
                lastModifiedOnline = cursor.getLong(lastModifiedOnlineCol);
                id = cursor.getLong(idCol);

                // set last_modified_local to last modified_online
                updateHostsSourceLastModifiedLocal(context, id, lastModifiedOnline);

            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }
    }

    /**
     * Blacklist
     */
    public static void insertBlacklistItem(Context context, String hostname) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.Blacklist.HOSTNAME, hostname);
        values.put(DatabaseContract.Blacklist.ENABLED, true); // default is enabled
        context.getContentResolver().insert(DatabaseContract.Blacklist.CONTENT_URI, values);
    }

    public static void deleteBlacklistItem(Context context, long rowId) {
        context.getContentResolver().delete(DatabaseContract.Blacklist.buildUri(Long.toString(rowId)), null, null);
    }

    public static void updateBlacklistItemHostname(Context context, long rowId, String hostname) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.Blacklist.HOSTNAME, hostname);
        context.getContentResolver().update(DatabaseContract.Blacklist.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static void updateBlacklistItemEnabled(Context context, long rowId, boolean enabled) {
        ContentValues values = new ContentValues();
        values.put(DatabaseContract.Blacklist.ENABLED, enabled);
        context.getContentResolver().update(DatabaseContract.Blacklist.buildUri(Long.toString(rowId)), values, null, null);
    }

    public static Cursor getEnabledBlacklistCursor(Context context) {
        return context.getContentResolver().query(DatabaseContract.Blacklist.CONTENT_URI,
                new String[] { DatabaseContract.Blacklist._ID, DatabaseContract.Blacklist.HOSTNAME, DatabaseContract.Blacklist.ENABLED },
                DatabaseContract.Blacklist.ENABLED + "=1", null, DatabaseContract.Blacklist.DEFAULT_SORT);
    }

    /**
     * Returns all blacklist items, that are enabled as THashSet
     *
     * @param context
     * @return
     */
    public static THashSet<String> getEnabledBlacklistHashSet(Context context) {
        THashSet<String> list = new THashSet<String>();
        Cursor cursor = getEnabledBlacklistCursor(context);

        if (cursor.moveToFirst()) {
            do {
                list.add(cursor.getString(cursor.getColumnIndexOrThrow(DatabaseContract.Blacklist.HOSTNAME)));
            } while (cursor.moveToNext());
        }
        if (cursor != null && !cursor.isClosed()) {
            cursor.close();
        }

        return list;
    }

    /**
     * Imports blacklist from THashSet<String> into database of MalwareShield
     *
     * @param context
     * @param blacklist
     */
    public static void importBlacklist(Context context, THashSet<String> blacklist) {
        ContentValues[] values = new ContentValues[blacklist.size()];

        // build values array based on THashSet
        Iterator<String> itr = blacklist.iterator();
        int x = 0;
        while (itr.hasNext()) {
            values[x] = new ContentValues();
            values[x].put(DatabaseContract.Blacklist.HOSTNAME, itr.next());
            values[x].put(DatabaseContract.Blacklist.ENABLED, true); // default is enabled

            x++;
        }

        // insert as bulk operation
        context.getContentResolver().bulkInsert(DatabaseContract.Blacklist.CONTENT_URI, values);
    }

}
