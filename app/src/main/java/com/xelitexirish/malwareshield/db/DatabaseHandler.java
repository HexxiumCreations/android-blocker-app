package com.xelitexirish.malwareshield.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.provider.BaseColumns;
import android.util.Log;

import com.xelitexirish.malwareshield.util.Constants;

public class DatabaseHandler extends SQLiteOpenHelper{

    private static final String DATABASE_NAME = "malwareshield.db";
    private static final int DATABASE_VERSION = 2;

    public interface Tables {
        String HOSTS_SOURCES = "hosts_sources";
        String BLACKLIST = "blacklist";
        String ADSLIST = "adslist";
    }

    private static final String CREATE_HOSTS_SOURCES = "CREATE TABLE IF NOT EXISTS "
            + Tables.HOSTS_SOURCES + "(" + BaseColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
            + DatabaseContract.HostsSourcesColumns.URL + " TEXT UNIQUE, " + DatabaseContract.HostsSourcesColumns.LAST_MODIFIED_LOCAL
            + " INTEGER, " + DatabaseContract.HostsSourcesColumns.LAST_MODIFIED_ONLINE + " INTEGER, "
            + DatabaseContract.HostsSourcesColumns.ENABLED + " INTEGER)";

    private static final String CREATE_BLACKLIST = "CREATE TABLE IF NOT EXISTS " + Tables.BLACKLIST
            + "(" + BaseColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
            + DatabaseContract.BlacklistColumns.HOSTNAME + " TEXT UNIQUE, " + DatabaseContract.BlacklistColumns.ENABLED + " INTEGER)";

    public static final String CREATE_ADSLIST = "CREATE TABLE IF NOT EXISTS " + Tables.ADSLIST
            + "(" + BaseColumns._ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
            + DatabaseContract.AdsListColums.HOSTNAME + " TEXT UNIQUE, " + DatabaseContract.AdsListColums.ENABLED + " INTEGER)";

    DatabaseHandler(Context context){
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }

    public long insertHostsSource(SQLiteStatement insertStmt, String url) {
        insertStmt.bindString(1, url);
        insertStmt.bindLong(2, 0); // last_modified_local starts at 0
        insertStmt.bindLong(3, 0); // last_modified_online starts at 0
        insertStmt.bindString(4, "1"); // default is enabled
        return insertStmt.executeInsert();
    }

    /**
     * Add default hosts sources
     * @param db
     */
    private void insertDefaultHostsSources(SQLiteDatabase db) {
        // fill default hosts sources
        SQLiteStatement insertStmt;
        String insertHostsSources = "INSERT OR IGNORE INTO " + Tables.HOSTS_SOURCES + "(url, last_modified_local, last_modified_online, enabled) VALUES (?, ?, ?, ?)";
        insertStmt = db.compileStatement(insertHostsSources);

        // Adblocker pages
        insertHostsSource(insertStmt, "https://raw.githubusercontent.com/HexxiumCreations/threat-list/gh-pages/hexxiumthreatlist.txt");
        insertHostsSource(insertStmt, "https://easylist-downloads.adblockplus.org/easylist.txt");

    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        Log.w(Constants.TAG, "Creating database...");

        db.execSQL(CREATE_HOSTS_SOURCES);
        db.execSQL(CREATE_BLACKLIST);
        db.execSQL(CREATE_ADSLIST);

        insertDefaultHostsSources(db);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        Log.w(Constants.TAG, "Upgrading database from version " + oldVersion + " to " + newVersion);

        if (oldVersion <= 1) {
            db.execSQL(CREATE_BLACKLIST);

        }else {
            db.execSQL("DROP TABLE IF EXISTS " + Tables.HOSTS_SOURCES);
            db.execSQL("DROP TABLE IF EXISTS " + Tables.BLACKLIST);
            db.execSQL("DROP TABLE IF EXISTS " + Tables.ADSLIST);
            onCreate(db);
        }
    }
}
